name: Build & Deploy to ECS Fargate (ECR)

on:
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  AWS_REGION: us-west-2
  AWS_ACCOUNT_ID: 604100153348
  ECR_REPOSITORY: simple-server
  CLUSTER_NAME: sathya-demo-server
  SERVICE_NAME: sathya-simple-server-service-wgzxr5e0
  CONTAINER_NAME: simple-server
  IMAGE_TAG: ${{ github.event.inputs.image_tag || github.sha }}

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/SathyaGithubActionsECSDeployRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Ensure ECR repository exists
        run: |
          aws ecr describe-repositories --repository-names "$ECR_REPOSITORY" >/dev/null 2>&1 || \
          aws ecr create-repository --repository-name "$ECR_REPOSITORY" --image-scanning-configuration scanOnPush=true

      - name: Build Docker image
        run: |
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REPOSITORY:latest .

      - name: Tag Docker image for ECR
        run: |
          ECR_URI="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}"
          echo "ECR_URI=${ECR_URI}" >> $GITHUB_ENV
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_URI:$IMAGE_TAG
          docker tag $ECR_REPOSITORY:latest $ECR_URI:latest

      - name: Push image to ECR
        run: |
          docker push $ECR_URI:$IMAGE_TAG
          docker push $ECR_URI:latest

      - name: Update ECS service with new image
        run: |
          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service $SERVICE_NAME \
            --force-new-deployment \
            --region $AWS_REGION

      - name: Wait for ECS service to stabilize
        run: |
          echo "Waiting for ECS service to stabilize..."
          aws ecs wait services-stable \
            --cluster $CLUSTER_NAME \
            --services $SERVICE_NAME \
            --region $AWS_REGION

      - name: Show ALB URL (optional)
        run: |
          echo "Assuming you have your ALB setup externally."
          echo "You can paste the ALB DNS manually or fetch it via CLI if needed."
